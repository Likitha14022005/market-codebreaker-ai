import streamlit as st
import pandas as pd
import numpy as np
from datetime import timedelta
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import plotly.graph_objects as go

# Set page config
st.set_page_config(page_title="Stock Price Prediction", layout="wide")

# App title
st.title(" Stock Price Prediction App")

# Load data
@st.cache_data
def load_data(path):
    try:
        df = pd.read_csv(path, parse_dates=['Date'])
        df.set_index('Date', inplace=True)
        return df
    except Exception as e:
        st.error(f"Failed to load data: {e}")
        return pd.DataFrame()

# Load CSV file
data = load_data('C:/Users/OFFICE/Desktop/stock price prediction.csv')

# Validate data
if data.empty:
    st.error("The data is empty. Please check the CSV file.")
    st.stop()

# Display preview
st.success("Data loaded successfully.")
st.subheader("Data Preview")
st.dataframe(data.head())

# Select target column
available_targets = [col for col in ['AMZN', 'DPZ', 'BTC', 'NFLX'] if col in data.columns]
if not available_targets:
    st.error("No valid target columns found in the dataset.")
    st.stop()

target_column = st.selectbox(" Select the target column for prediction", options=available_targets)

# Features and target
X = data.drop(columns=[target_column])
y = data[target_column]

# Split data
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestRegressor(n_estimators=100, random_state=42)
try:
    model.fit(X_train, y_train)
except Exception as e:
    st.error(f"Model training failed: {e}")
    st.stop()

# Validation
val_predictions = model.predict(X_val)
mse = mean_squared_error(y_val, val_predictions)
st.metric(label=" Validation Mean Squared Error", value=f"{mse:.2f}")

# Forecast settings
st.sidebar.header("üõ†Ô∏è Forecast Settings")
future_days = st.sidebar.slider("Select future prediction days", min_value=1, max_value=30, value=7)

# Forecast future prices
last_row = X.iloc[-1].copy()
future_predictions = []

for _ in range(future_days):
    pred = model.predict(last_row.values.reshape(1, -1))[0]
    future_predictions.append(pred)
    # Update the last row for the next prediction
    last_row.iloc[0] = pred  # This is a simple update; consider refining this logic

# Create future dates
last_known_date = data.index[-1]
future_dates = [last_known_date + timedelta(days=i) for i in range(1, future_days + 1)]

# Plotting
st.header(f" {target_column} Stock Price Forecast ({future_days} Days)")

fig = go.Figure()

# Historical data (last 3 years)
years_back = 3
start_date = last_known_date - timedelta(days=365 * years_back)
historical_data = data[target_column].loc[start_date:]

fig.add_trace(go.Scatter(
    x=historical_data.index,
    y=historical_data,
    mode='lines',
    name='Historical Data',
    line=dict(color='blue')
))

fig.add_trace(go.Scatter(
    x=future_dates,
    y=future_predictions,
    mode='lines+markers',
    name='Future Prediction',
    line=dict(color='red', dash='dash')
))

fig.update_layout(
    title=f"{target_column} Price Prediction",
    xaxis_title="Date",
    yaxis_title="Price",
    template="plotly_white"
)

st.plotly_chart(fig, use_container_width=True
